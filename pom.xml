<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>pdf-signing-script</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- iText 7 Core for PDF Creation and Manipulation -->
        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itext7-core</artifactId>
            <version>7.2.4</version>
            <type>pom</type>
        </dependency>

        <!-- BouncyCastle for cryptographic operations -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.70</version>
        </dependency>
    </dependencies>

</project>
src/
 └─ main/
     └─ java/
         └─ com/
             └─ example/
                 └─ PdfSigner.java
pom.xml  (for Maven dependencies)
<dependencies>
    <!-- Apache PDFBox for PDF manipulation -->
    <dependency>
        <groupId>org.apache.pdfbox</groupId>
        <artifactId>pdfbox</artifactId>
        <version>2.0.27</version>
    </dependency>

    <!-- Bouncy Castle for Cryptography -->
    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcprov-jdk15on</artifactId>
        <version>1.70</version>
    </dependency>

    <!-- Bouncy Castle PKCS7 for handling digital signatures -->
    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcpkix-jdk15on</artifactId>
        <version>1.70</version>
    </dependency>
</dependencies>
package com.example;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.PDField;
import org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField;
import org.apache.pdfbox.pdmodel.PDSignature;
import org.apache.pdfbox.pdmodel.PDSignatureField;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.io.File;
import java.io.FileInputStream;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.Signature;
import java.security.Security;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.PDField;

import java.security.Signature;
import java.util.Calendar;
import java.util.Date;

public class PdfSigner {

    static {
        Security.addProvider(new BouncyCastleProvider());
    }

    public static void signPdf(String inputPdf, String outputPdf, String certPath, String certPassword, String alias) throws Exception {
        // Load the certificate and private key
        KeyStore keystore = KeyStore.getInstance("PKCS12");
        keystore.load(new FileInputStream(certPath), certPassword.toCharArray());

        // Retrieve private key and certificate
        PrivateKey privateKey = (PrivateKey) keystore.getKey(alias, certPassword.toCharArray());
        X509Certificate certificate = (X509Certificate) keystore.getCertificate(alias);

        // Load the PDF to be signed
        PDDocument document = PDDocument.load(new File(inputPdf));

        // Create a signature field
        PDPage page = document.getPage(0);
        PDSignatureField signatureField = new PDSignatureField(new PDDocument());
        signatureField.setPartialName("Signature1");

        PDRectangle signatureRect = new PDRectangle(100, 100, 200, 50);
        signatureField.setWidget(signatureRect);
        page.getAnnotations().add(signatureField.getWidget());

        // Prepare signature information
        PDSignature signature = new PDSignature();
        signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);
        signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);
        signature.setByteRange(new int[]{0, 0, 0, 0});
        signature.setContents(new byte[0]);

        // Add the signature to the PDF document
        document.addSignature(signature);

        // Create a Content Stream to add signature content
        PDPageContentStream contentStream = new PDPageContentStream(document, page, PDPageContentStream.AppendMode.APPEND, true);
        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);
        contentStream.newLineAtOffset(150, 150);
        contentStream.showText("Signed by: " + certificate.getSubjectDN());
        contentStream.endText();
        contentStream.close();

        // Sign the document with the private key
        Signature signer = Signature.getInstance("SHA256withRSA");
        signer.initSign(privateKey);
        signer.update("Some data to be signed".getBytes());

        byte[] signatureBytes = signer.sign();
        signature.setContents(signatureBytes);

        // Save the signed PDF
        document.save(outputPdf);
        document.close();
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 5) {
            System.out.println("Usage: java com.example.PdfSigner <input_pdf> <output_pdf> <certificate.p12> <certificate_password> <alias>");
            return;
        }

        String inputPdf = args[0];
        String outputPdf = args[1];
        String certPath = args[2];
        String certPassword = args[3];
        String alias = args[4];

        signPdf(inputPdf, outputPdf, certPath, certPassword, alias);
    }
}
your-project/
│
├── pom.xml                      # The Maven build file
├── src/
│   └── main/
│       └── java/
│           └── com/
│               └── example/
│                   └── PdfSigner.java    # Your Java source file
│
└── target/                        # Compiled files go here
    └── classes/
        └── com/
            └── example/
                └── PdfSigner.class    # This will be created after compilation
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>1.8</source> <!-- Or your Java version -->
                <target>1.8</target> <!-- Or your Java version -->
            </configuration>
        </plugin>
    </plugins>
</build>
your-project
│
├── pom.xml
├── src
│   └── main
│       └── java
│           └── com
│               └── example
│                   └── PdfSigner.java
├── target
│   └── classes
│   └── libs (if any external dependencies)
└── pom.xml
<dependencies>
    <!-- Example: BouncyCastle for signing PDFs -->
    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcpkix-jdk15on</artifactId>
        <version>1.70</version>
    </dependency>
    
    <!-- Example: iText for PDF handling -->
    <dependency>
        <groupId>com.itextpdf</groupId>
        <artifactId>itext7-core</artifactId>
        <version>7.1.14</version>
        <type>pom</type>
    </dependency>
</dependencies>

<build>
    <plugins>
        <!-- Plugin to compile Java classes -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
        <!-- Plugin to build a JAR (if needed) -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.1.0</version>
            <configuration>
                <archive>
                    <manifestEntries>
                        <Main-Class>com.example.PdfSigner</Main-Class>
                    </manifestEntries>
                </archive>
            </configuration>
        </plugin>
    </plugins>
</build>
package com.example;

import java.io.File;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;

public class PdfSigner {
    public static void main(String[] args) {
        // Your logic to sign PDFs
        System.out.println("PDF Signer Started...");
    }
}
<build>
    <plugins>
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.0</version>
            <executions>
                <execution>
                    <goals>
                        <goal>java</goal>
                    </goals>
                    <configuration>
                        <mainClass>com.example.PdfSigner</mainClass>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
package com.example;

import java.io.File;
import java.io.IOException;

public class PdfSigner {
    
    public static void main(String[] args) {
        try {
            System.out.println("Starting PDF signing process...");
            // Simulate signing a PDF (replace with actual PDF signing logic)
            File pdfFile = new File("path/to/your/file.pdf");
            if (!pdfFile.exists()) {
                throw new IOException("PDF file not found: " + pdfFile.getAbsolutePath());
            }

            // Add your PDF signing logic here
            System.out.println("PDF signed successfully!");
        } catch (Exception e) {
            e.printStackTrace();  // Print the exception stack trace to debug
        }
    }
}
<dependencies>
    <dependency>
        <groupId>com.itextpdf</groupId>
        <artifactId>itext7-core</artifactId>
        <version>7.2.2</version>
    </dependency>
</dependencies>
package com.example;

import java.io.File;
import java.io.IOException;

public class PdfSigner {
    
    public static void main(String[] args) {
        try {
            System.out.println("Starting PDF signing process...");
            // Simulate signing a PDF (replace with actual PDF signing logic)
            File pdfFile = new File("path/to/your/file.pdf");
            if (!pdfFile.exists()) {
                throw new IOException("PDF file not found: " + pdfFile.getAbsolutePath());
            }

            // Add your PDF signing logic here
            System.out.println("PDF signed successfully!");
        } catch (Exception e) {
            e.printStackTrace();  // Print the exception stack trace to debug
        }
    }
}
File pdfFile = new File("path/to/your/pdf-file.pdf");
if (!pdfFile.exists()) {
    System.out.println("File not found: " + pdfFile.getAbsolutePath());
}
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>pdf-signing-script</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <iText7 for PDF signing>
        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itext7-core</artifactId>
            <version>7.2.2</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.5.0</version> <!-- Use the latest version -->
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal> <!-- This goal tells Maven to run the Java class -->
                        </goals>
                        <configuration>
                            <mainClass>com.example.PdfSigner</mainClass> <!-- Main class to execute -->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
